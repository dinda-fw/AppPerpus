/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package appperpus;

import java.awt.Component;
import java.awt.Desktop; // Untuk membuka file dengan aplikasi default
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID; // Untuk menghasilkan nama file sementara yang unik
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableCellEditor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTextField; // Diperlukan untuk ButtonEditor default
import javax.swing.SwingConstants; // Diperlukan untuk ImageRenderer
import java.awt.Image; // Diperlukan untuk ImageIcon
import javax.swing.ImageIcon; // Diperlukan untuk menampilkan gambar
import javax.swing.JLabel; // Diperlukan untuk ImageRenderer

/**
 *
 * @author mac
 */
public class Panel_bukuonline extends javax.swing.JPanel {

    private DefaultTableModel model;
    // loggedInAnggota tidak digunakan di sini untuk fungsionalitas membaca,
    // tapi tetap dipertahankan jika di masa depan ingin dicatat riwayatnya.
    private BlueprintAnggota loggedInAnggota; 
    
    public Panel_bukuonline() {
        initComponents();
        setupTable();
        loadDataBukuOnline();
    }
    
    public Panel_bukuonline(BlueprintAnggota anggota) {
        this.loggedInAnggota = anggota;
        initComponents();
        setupTable();
        loadDataBukuOnline();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneldasar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        paneldasar.setBackground(new java.awt.Color(255, 255, 255));
        paneldasar.setPreferredSize(new java.awt.Dimension(70, 50));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setText("Data buku Baca Online");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setText("user");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout paneldasarLayout = new javax.swing.GroupLayout(paneldasar);
        paneldasar.setLayout(paneldasarLayout);
        paneldasarLayout.setHorizontalGroup(
            paneldasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneldasarLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(paneldasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneldasarLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
        paneldasarLayout.setVerticalGroup(
            paneldasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneldasarLayout.createSequentialGroup()
                .addGroup(paneldasarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneldasarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(paneldasarLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(paneldasar, "card2");
    }// </editor-fold>//GEN-END:initComponents

    
    private void setupTable() {
        model = new DefaultTableModel() {
            // Mengoverride isCellEditable untuk membuat sel tidak dapat diedit kecuali kolom tombol "Aksi".
            @Override
            public boolean isCellEditable(int row, int column) {
                // Kolom "Aksi" (kolom terakhir sebelum gambar) bisa diedit karena ada tombol di dalamnya.
                // Kolom "Gambar Cover" tidak bisa diedit.
                return column == getColumnCount() - 2; // "Aksi" akan menjadi kolom ke-5 (indeks 4)
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                // Memberi tahu tabel bahwa kolom "Aksi" (indeks 4) dan "Gambar Cover" (indeks 5) berisi byte[]
                if (columnIndex == 4 || columnIndex == 5) {
                    return byte[].class; 
                }
                return super.getColumnClass(columnIndex);
            }
        };

        // Menambahkan kolom ke model tabel sesuai dengan skema tb_buku_bacaan_online
        model.addColumn("Judul Buku");
        model.addColumn("Pengarang");
        model.addColumn("Penerbit");
        model.addColumn("Tahun Terbit");
        model.addColumn("File"); // Kolom untuk tombol "Baca"
        model.addColumn("Gambar Cover"); // Kolom baru untuk gambar cover

        jTable1.setModel(model); // Set model ke JTable Anda

        // Mengatur Cell Renderer dan Cell Editor untuk kolom "Aksi" (indeks 4).
        jTable1.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer("Baca"));
        jTable1.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JTextField(), "Baca", this)); 
        
        // Mengatur Cell Renderer untuk kolom "Gambar Cover" (indeks 5)
        jTable1.getColumnModel().getColumn(5).setCellRenderer(new appperpus.ImageRenderer()); // Menggunakan ImageRenderer eksternal

        jTable1.setRowHeight(80); // Atur tinggi baris agar tombol dan gambar terlihat baik
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(100); // Lebar tombol "Aksi"
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(120); // Lebar kolom gambar
    }


    /**
     * Memuat data buku online dari database tb_buku_bacaan_online ke JTable.
     */
    private void loadDataBukuOnline() {
        model.setRowCount(0); // Bersihkan data lama di tabel sebelum memuat yang baru

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = appperpus.koneksi.getKoneksi(); // Mendapatkan koneksi dari kelas koneksi Anda
            if (conn != null) {
                // Query SQL untuk mengambil semua data dari tb_buku_bacaan_online
                // Termasuk kolom 'gambar' yang baru
                String sql = "SELECT Judul_Buku, Pengarang_Buku, Penerbit_buku, Tahun_Terbit, file_path, gambar FROM tb_buku_bacaan_online";
                pstmt = conn.prepareStatement(sql);
                rs = pstmt.executeQuery();

                while (rs.next()) {
                    // Mengambil data dari setiap kolom
                    String judul = rs.getString("Judul_Buku");
                    String pengarang = rs.getString("Pengarang_Buku");
                    String penerbit = rs.getString("Penerbit_buku");
                    String tahunTerbit = rs.getString("Tahun_Terbit");
                    byte[] filePathBlob = rs.getBytes("file_path"); // Mengambil data biner (BLOB) dari kolom file_path
                    byte[] imageDataBlob = rs.getBytes("gambar"); // Mengambil data biner (BLOB) dari kolom gambar

                    // Menambahkan baris ke model tabel.
                    // Data biner (filePathBlob) disematkan di kolom "Aksi" (indeks 4)
                    // Data biner gambar (imageDataBlob) disematkan di kolom "Gambar Cover" (indeks 5)
                    model.addRow(new Object[]{judul, pengarang, penerbit, tahunTerbit, filePathBlob, imageDataBlob});
                }
            } else {
                JOptionPane.showMessageDialog(this, "Koneksi database tidak tersedia.", "Error Koneksi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error memuat data buku online: " + e.getMessage(), "Error Database", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            // Pastikan semua sumber daya database ditutup dengan aman
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close(); // Penting: tutup koneksi setelah selesai
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        jTable1.repaint(); // Memaksa tabel untuk menggambar ulang
        jTable1.revalidate(); 
    }
    
    private void openPdfFromBytes(byte[] fileBytes, String judulBuku) {
        if (fileBytes == null || fileBytes.length == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada file PDF tersedia untuk buku ini.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Buat direktori sementara jika belum ada.
        // File akan disimpan di direktori temporary OS (misal: C:\Users\AppData\Local\Temp\)
        // di dalam sub-folder "PerpustakaanOnline".
        File tempDir = new File(System.getProperty("java.io.tmpdir"), "PerpustakaanOnline");
        if (!tempDir.exists()) {
            tempDir.mkdirs(); // Buat direktori jika belum ada
        }

        // Buat nama file yang lebih unik dan bersih untuk menghindari konflik
        String safeFileName = judulBuku.replaceAll("[^a-zA-Z0-9.-]", "_"); // Bersihkan judul dari karakter ilegal
        File tempFile = new File(tempDir, safeFileName + "_" + UUID.randomUUID().toString().substring(0, 8) + ".pdf"); 

        try (FileOutputStream fos = new FileOutputStream(tempFile)) {
            fos.write(fileBytes);
            fos.flush(); // Pastikan semua data ditulis ke disk

            // Buka file dengan aplikasi default sistem (misalnya Adobe Reader, browser, dll.)
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().open(tempFile);
                JOptionPane.showMessageDialog(this, "Membuka file: " + tempFile.getName(), "Informasi", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Desktop API tidak didukung. Tidak dapat membuka file secara otomatis.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Gagal membuka file PDF: " + e.getMessage(), "Error I/O", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        // Catatan: File sementara ini tidak dihapus secara otomatis setelah dibuka.
        // Untuk aplikasi yang lebih kompleks, Anda mungkin ingin menambahkan mekanisme
        // penghapusan file sementara saat aplikasi ditutup atau setelah durasi tertentu.
    }
    
    /**
     * Inner class untuk merender JButton di dalam sel JTable.
     * Ini bertanggung jawab untuk bagaimana tombol terlihat di tabel.
     */
    private class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer(String text) {
            setOpaque(true);
            setText(text); 
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }
            setText("Baca"); 
            
            // Mengatur ukuran preferensi tombol agar tidak terlalu besar
            int buttonWidth = 80; // Lebar yang diinginkan (bisa disesuaikan)
            int buttonHeight = table.getRowHeight() - 10; // Tinggi sedikit lebih kecil dari tinggi baris
            setPreferredSize(new java.awt.Dimension(buttonWidth, buttonHeight));
            setMinimumSize(new java.awt.Dimension(buttonWidth, buttonHeight));
            setMaximumSize(new java.awt.Dimension(buttonWidth, buttonHeight));

            return this;
        }
    }

    /**
     * Inner class untuk menangani aksi klik JButton di dalam sel JTable.
     * Ini bertanggung jawab untuk apa yang terjadi saat tombol diklik.
     */
    private class ButtonEditor extends JPanel implements TableCellEditor {
        private JButton button;
        private byte[] currentFileBytes; 
        private String currentJudulBuku; 
        private Panel_bukuonline parentPanel; 

        public ButtonEditor(JTextField tf, String buttonText, Panel_bukuonline parent) {
            super(new java.awt.BorderLayout()); 
            this.parentPanel = parent; 

            button = new JButton(buttonText);
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped(); 
                    parentPanel.openPdfFromBytes(currentFileBytes, currentJudulBuku);
                }
            });

            // Mengatur ukuran tombol di editor agar konsisten dengan renderer
            int buttonWidth = 80;
            int buttonHeight = parentPanel.jTable1.getRowHeight() - 10;
            button.setPreferredSize(new java.awt.Dimension(buttonWidth, buttonHeight));
            button.setMinimumSize(new java.awt.Dimension(buttonWidth, buttonHeight));
            button.setMaximumSize(new java.awt.Dimension(buttonWidth, buttonHeight));
            
            add(button, java.awt.BorderLayout.CENTER); 
            setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)); // Menambahkan padding
        }
        
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            currentJudulBuku = (String) table.getModel().getValueAt(row, 0); 
            currentFileBytes = (byte[]) value; 

            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
            }
            return this; 
        }

        @Override
        public Object getCellEditorValue() {
            return currentFileBytes; 
        }

        @Override
        public boolean isCellEditable(java.util.EventObject anEvent) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(java.util.EventObject anEvent) {
            return true;
        }

        @Override
        public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }

        @Override
        public void cancelCellEditing() {
            fireEditingCanceled();
        }

        private java.util.Vector<javax.swing.event.CellEditorListener> listeners = new java.util.Vector<>();

        @Override
        public void addCellEditorListener(javax.swing.event.CellEditorListener l) {
            listeners.addElement(l);
        }

        @Override
        public void removeCellEditorListener(javax.swing.event.CellEditorListener l) {
            listeners.removeElement(l);
        }

        protected void fireEditingStopped() {
            for (int i = listeners.size() - 1; i >= 0; i--) {
                listeners.elementAt(i).editingStopped(new javax.swing.event.ChangeEvent(this));
            }
        }

        protected void fireEditingCanceled() {
            for (int i = listeners.size() - 1; i >= 0; i--) {
                listeners.elementAt(i).editingCanceled(new javax.swing.event.ChangeEvent(this));
            }
        }
    }


    

    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel paneldasar;
    // End of variables declaration//GEN-END:variables
}
